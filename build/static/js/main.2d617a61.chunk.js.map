{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","auth","GoogleAuthProvider","App","subscribe","ref","database","on","snapshot","items","val","newState","item","push","id","title","user","avatar","console","log","setState","state","currentItem","username","handleChange","bind","handleSubmit","login","logout","onAuthStateChanged","uid","e","this","target","name","value","signOut","then","signInWithPopup","result","preventDefault","itemsRef","displayName","email","photoURL","itemId","remove","className","onClick","src","onSubmit","type","placeholder","onChange","duration","easing","map","key","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d617a61.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n const firebaseConfig = {\n    apiKey: \"AIzaSyDm9lqCKRygM-xrKPI0WY_2eqQICsKTjgM\",\n    authDomain: \"list-3-again.firebaseapp.com\",\n    databaseURL: \"https://list-3-again.firebaseio.com\",\n    projectId: \"list-3-again\",\n    storageBucket: \"list-3-again.appspot.com\",\n    messagingSenderId: \"905172563800\",\n    appId: \"1:905172563800:web:a5d90ae460a7130792972d\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  export const provider = new firebase.auth.GoogleAuthProvider();\n  export const auth = firebase.auth();\n\n  export default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase, { auth, provider } from './firebase';\nimport FlipMove from \"react-flip-move\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [],\n      user: null\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  };\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) =>{\n      if (user) {\n        this.setState({ user });\n        this.subscribe(`${user.uid}/items`);\n      }\n    })\n  }\n  \n  subscribe = (ref) => {\n    const itemsRef = firebase.database().ref(ref);\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user,\n          avatar: items[item].avatar\n        });\n      }\n      console.log('new item updated', { newState });\n      this.setState({\n        items: newState\n      });\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  logout() {\n    auth.signOut()\n    .then(() => {\n      this.setState({\n        user: null\n      });\n    });\n  };\n  login(){\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user;\n      this.setState({\n        user\n      });\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref(`${this.state.user.uid}/items`);\n    const item = {\n      title: this.state.currentItem,\n      user: this.state.user.displayName || this.state.user.email,\n      avatar: this.state.user.photoURL || null\n    }\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      username: ''\n    })\n  }\n\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n  render() {\n    return (\n      <div className='app'>\n  <header>\n    <div className=\"wrapper\">\n      <h1>The List</h1>\n      {this.state.user ?\n        <button onClick={this.logout}>Logout</button>                \n        :\n        <button onClick={this.login}>Log In</button>              \n      }\n    </div>\n  </header>\n\n  \n  {this.state.user ? \n    <div>\n      <div className='user-profile'>\n        <img src={this.state.user.photoURL} />\n      </div>\n      <section className='add-item'>\n        <form onSubmit={this.handleSubmit}>\n          <input \n            type=\"text\" \n            name=\"currentItem\" \n            placeholder=\"What are you bringing?\" \n            onChange={this.handleChange} \n            value={this.state.currentItem} \n          />\n          <button>send</button>\n        </form>\n        </section>\n        <div className='container'>\n      <section className='display-item'>\n        <div className=\"wrapper\">\n          <ul>\n          <FlipMove duration={250} easing=\"ease-out\">\n            {this.state.items.map((item) => {\n              return (\n                <li key={item.id}>\n                  <h3>{item.title}</h3>\n                  <div className=\"contributor\">\n                    { item.avatar && <img className=\"who-says\" src={item.avatar} /> }\n                    <p>{item.user}\n                      {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                      <button onClick={() => this.removeItem(item.id)}>â…¹</button> : null}\n                    </p>\n\n                  </div>\n                  \n            </li>\n          )\n        })}\n        </FlipMove>\n      </ul>\n    </div>\n  </section>\n\n</div>\n    </div>\n    :\n    <div className='wrapper'>\n      <p>You must be logged in to see the fun!</p>\n    </div>\n  }\n  \n</div>\n\n\n    )}\n}\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}